const { cmd } = require('../command');
const axios = require('axios');

cmd({
    pattern: "tiktok",
    react: "üé∂",
    desc: "Download videos from TikTok with multiple options",
    category: "download",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, reply }) => {
    try {
        if (!q) {
            return reply("‚ùå Please provide the TikTok video URL.");
        }

        const tiktokUrl = q;

        // Use TikTok's video downloading service or API to get the video URL
        const response = await axios.get(`https://api.tiktokvideodownloader.com/api/v1/${tiktokUrl}`);
        const videoUrl = response.data.videoUrl;
        const audioUrl = response.data.audioUrl;
        const videoWithoutWatermarkUrl = response.data.videoUrlWithoutWatermark; // Assuming the API returns this

        if (!videoUrl) {
            return reply("‚ùå Could not find the video on TikTok.");
        }

        const tiktokDesc = `
‚ï≠‚îÄ‚îÄ‚ùÆ TikTok Video Download ‚ùØ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ
‚îÇ‚û§ Video: ${tiktokUrl}
‚îÇ‚û§ Link: ${videoUrl}
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

üî¢ Reply Below Number

1 | Download Video with Watermark
2 | Download Video without Watermark
3 | Download Audio Only

¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ç Ä Íú±·¥á…¥·¥áÍú± ú 
`;

        const vv = await conn.sendMessage(from, { caption: tiktokDesc }, { quoted: mek });

        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();

            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
                switch (selectedOption) {
                    case '1':
                        // Send the TikTok video with watermark
                        await conn.sendMessage(from, { video: { url: videoUrl }, caption: ' ú è·¥ò·¥á Ä-·¥ç·¥Ö ·¥°…™·¥õ ú ·¥°·¥Ä·¥õ·¥á Ä·¥ç·¥Ä Ä·¥ã ·¥õ…™·¥ã·¥õ·¥è·¥ã ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü.' }, { quoted: mek });
                        break;
                    case '2':
                        // Send the TikTok video without watermark
                        if (!videoWithoutWatermarkUrl) {
                            return reply("‚ùå Unable to fetch video without watermark.");
                        }
                        await conn.sendMessage(from, { video: { url: videoWithoutWatermarkUrl }, caption: ' ú è·¥ò·¥á Ä-·¥ç·¥Ö ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥°·¥Ä·¥õ·¥á Ä·¥ç·¥Ä Ä·¥ã ·¥õ…™·¥ã·¥õ·¥è·¥ã ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü.'' }, { quoted: mek });
                        break;
                    case '3':
                        // Send the TikTok audio
                        if (!audioUrl) {
                            return reply("‚ùå Unable to fetch audio.");
                        }
                        await conn.sendMessage(from, { audio: { url: audioUrl }, caption: ' ú è·¥ò·¥á Ä-·¥ç·¥Ö ·¥õ…™·¥ã·¥õ·¥è·¥ã ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü.' }, { quoted: mek });
                        break;
                    default:
                        reply("‚ùå Invalid option. Please select a valid optionüî¥");
                }
            }
        });
    } catch (e) {
        console.error(e);
        reply("‚ùå An error occurred while processing your request.");
    }
}); 
